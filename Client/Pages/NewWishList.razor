@page "/newlist"
@inject HttpClient Http
@inject AppState AppState
@inject NavigationManager NavigationManager

<h3>New Wish List</h3>

@if (showAlert)
{
    <MudAlert @ref="_alert" Severity="@_serverity" Elevation="0">
        @_alertMessage
    </MudAlert>
}
<MudGrid>
    <MudItem xs="12">
        <MudForm @ref="_form" Model="@_wishList" @bind-Errors="@errors">
            <MudTextField T="string" Required="true" RequiredError="List name is required!" @bind-Value="_wishList.Name" Label="Name"/>
            <MudTextField T="string" @bind-Value="_wishList.UserDisplayName" Label="User"/>
            <div style="margin-bottom:15px"></div>
            <MudButton Color="Color.Primary" @onclick="() => SubmitForm()" Type="submit" Variant="Variant.Filled">Submit</MudButton>
        </MudForm>
    </MudItem>
</MudGrid>
@code {

    private bool showAlert;
    private WishListDTO _wishList = new();

    private MudForm _form = null!;
    private MudAlert? _alert;
    private string[] errors = { };
    private RenderFragment? _alertContent;
    private string _alertMessage = "Message Not Set";

    //Alert box
    private Severity _serverity;

    private async void SubmitForm()
    {
        await _form.Validate();
        if (_form is {IsValid: false }) return;

        var result = await Http.PostAsJsonAsync("WishList", _wishList);

        showAlert = true;

        if(result.IsSuccessStatusCode)
        {
            showAlert = true;
            _alertMessage = "New List Created!";
            _serverity =  Severity.Success;


            NavigationManager.NavigateTo("/");

            AppState.SetMessage(_alertMessage, _serverity);

            //await _form.ResetAsync()!;
            //_wishList = new WishListDTO();
        }
        else
        {
            _alertMessage = "Error Creating List!";
            _serverity = Severity.Error;

            AppState.SetMessage(_alertMessage, _serverity);

            NavigationManager.NavigateTo("/");
        }



        //StateHasChanged();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_alert != null)
        {

        }

        if (_alert != null)
        {

        }

        base.OnAfterRender(firstRender);
    }


    //private RenderFragment GetAlertContent(string contentType)
    //{
    //    return contentType switch
    //    {
    //        "Success" => builder => { builder.AddContent(0, "Success"); },
    //        "Error" => builder => { builder.AddContent(0, "Error"); },
    //        _ => builder => { builder.AddContent(0, "This should never appear"); }

    //        };
    //}
}
