@page "/wishlist"
@page "/"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient Http

<AuthorizeView>
    <Authorized>


        <style type="text/css">
    .whitespace {
        margin-bottom;: 20px;
    };
</style>

        <h1>WishLists</h1>

        <EsMessageBox></EsMessageBox> 

        @if (_wishlists == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if(_selectedRow != null){ 
                @: you have selected @_selectedRow.Name
            }
    
            <div class="whitespace"></div>

            <div style="margin-bottom:15px;">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="EventCallback.Factory.Create<MouseEventArgs>(this, AddItem)">Add New List</MudButton>
            </div> 

            <MudTable Items="@_wishlists" @ref="_mudTable" SelectOnRowClick="true" RowStyleFunc="@SelectedRowStyleFunc" SelectedItemChanged="EventCallback.Factory.Create<WishListDTO>(this,HandleSelectedWishList)">
                <HeaderContent>
                    <MudTh>List Owner</MudTh>
                    <MudTh>List Name</MudTh>
                    <MudTh>Notes</MudTh>
                </HeaderContent>
                <RowTemplate Context="rtContext">
                    <MudTd>@rtContext.UserDisplayName</MudTd>
                    <MudTd>@rtContext.Name</MudTd>
                    <MudTd>@rtContext.Description</MudTd>
                    <MudTd>@rtContext.ItemCount</MudTd>
                    <MudTd>@rtContext.NewItems</MudTd>
                </RowTemplate>
            </MudTable>


        }
    </Authorized>
@*    <NotAuthorized>
        WishLists.razor component requires authorization
    </NotAuthorized>*@
</AuthorizeView>

@code {


    //EXAMPLE 2
    private MudTable<WishListDTO>? _mudTable;

    //TODO Inject WishListState to track selected item
    

    private string SelectedRowStyleFunc(WishListDTO wl, int rowNumber)
    {
        if (_mudTable?.SelectedItem != null && _mudTable.SelectedItem.Equals(wl))
        {
            return "background-color: lightgrey";
        }
        return string.Empty;
    }



    //query wish lists for API
    private WishListDTO[]? _wishlists;

    private WishListDTO? _selectedRow;


    protected override async Task OnInitializedAsync()
    {
        _wishlists ??= await Http.GetFromJsonAsync<WishListDTO[]>("WishList");
    }

    private void HandleSelectedWishList(WishListDTO list)
    {
        _selectedRow = list;
        //redirect user to another page
        NavigationManager.NavigateTo($"/details/{list.Id}");
        //NavigationManager.NavigateTo($"/details/{Guid.NewGuid()}");
    }

    public void AddItem(MouseEventArgs args)
    {
        //navigate to page to create a new wishlist
        NavigationManager.NavigateTo($"/newlist");
    }  

    private void OnClick()
    {
        var link = $"/guidtest/{Guid.NewGuid()}";
        NavigationManager.NavigateTo(link);

    }

}
