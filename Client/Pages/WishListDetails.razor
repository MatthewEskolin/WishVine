@page "/details/{wishlistId:guid}"
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@inject HttpClient Http

<div>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="EventCallback.Factory.Create<MouseEventArgs>(this, AddItem)">Create New</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddItem">Create New Method Group</MudButton>
</div>
<div>
<input type="button" class="btn btn-primary" value="Delete" Text="DELETE"
       @onclick="(() => this.CreateNew())"  />

</div>
<MudTable ref="@_tblItems" Items="@_wishList.Items" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@Loading" LoadingProgressColor="Color.Info" SelectedItemChanged="EventCallback.Factory.Create<WishListItemDTO>(this, HandleSelectedWishListItem)">
<HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Description</MudTh>
        <MudTh>Item Link</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.ImageLink</MudTd>
        <MudTd DataLabel="Sign">@context.Description</MudTd>
        <MudTd DataLabel="Name">@context.Link</MudTd>
    </RowTemplate>
</MudTable>


@code {

    /// <summary>
    /// ID To identify the wishlist
    /// </summary>
    [Parameter]
    public Guid WishListId { get; set; }

    /// <summary>
    /// True if Loading data
    /// </summary>
    public bool Loading { get; set; }

    WishListDTO? _wishList = new();

    MudTable<WishListItemDTO> _tblItems = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadWishList();
    }

    private async Task LoadWishList()
    {
        Loading = true;
        _wishList = await Http.GetFromJsonAsync<WishListDTO>($"WishList/{this.WishListId}");

        Console.WriteLine("Initialized!");

        Loading = false;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"After Render! {_wishList?.Items.Count} Items");
    }

    private string SelectedRowStyleFunc(WishListItemDTO wl, int rowNumber)
    {
        if (_tblItems?.SelectedItem != null && _tblItems.SelectedItem.Equals(wl))
        {
            return "background-color: lightgrey";
        }
        return string.Empty;
    }


    private void HandleSelectedWishListItem(WishListItemDTO obj)
    {
    }

    public void AddItem(MouseEventArgs args)
    {
        Console.WriteLine(args.ClientX.ToString(CultureInfo.InvariantCulture));
        Console.WriteLine(args.ClientX.ToString(CultureInfo.InvariantCulture));

        //NavigationManager.NavigateTo($"/additem/{WishListId}");
    }

    private Task CreateNew()
    {
        Console.WriteLine("Create New Here");
        return Task.CompletedTask;
    }

}
